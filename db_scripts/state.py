from connectors import StoreManager
import asyncio
import logging
import os


async def main(logger):
    try:
        with StoreManager(logger) as manager:
            manager.UpdateState('AL', 'Alabama')
            manager.UpdateState('AK', 'Alaska')
            manager.UpdateState('AZ', 'Arizona')
            manager.UpdateState('AR', 'Arkansas')
            manager.UpdateState('CA', 'California')
            manager.UpdateState('CO', 'Colorado')
            manager.UpdateState('CT', 'Connecticut')
            manager.UpdateState('DE', 'Delaware')
            manager.UpdateState('DC', 'District of Columbia')
            manager.UpdateState('FL', 'Florida')
            manager.UpdateState('GA', 'Georgia')
            manager.UpdateState('HI', 'Hawaii')
            manager.UpdateState('ID', 'Idaho')
            manager.UpdateState('IL', 'Illinois')
            manager.UpdateState('IN', 'Indiana')
            manager.UpdateState('IA', 'Iowa')
            manager.UpdateState('KS', 'Kansas')
            manager.UpdateState('KY', 'Kentucky')
            manager.UpdateState('LA', 'Louisiana')
            manager.UpdateState('ME', 'Maine')
            manager.UpdateState('MD', 'Maryland')
            manager.UpdateState('MA', 'Massachusetts')
            manager.UpdateState('MI', 'Michigan')
            manager.UpdateState('MN', 'Minnesota')
            manager.UpdateState('MS', 'Mississippi')
            manager.UpdateState('MO', 'Missouri')
            manager.UpdateState('MT', 'Montana')
            manager.UpdateState('NE', 'Nebraska')
            manager.UpdateState('NV', 'Nevada')
            manager.UpdateState('NH', 'New Hampshire')
            manager.UpdateState('NJ', 'New Jersey')
            manager.UpdateState('NM', 'New Mexico')
            manager.UpdateState('NY', 'New York')
            manager.UpdateState('NC', 'North Carolina')
            manager.UpdateState('ND', 'North Dakota')
            manager.UpdateState('OH', 'Ohio')
            manager.UpdateState('OK', 'Oklahoma')
            manager.UpdateState('OR', 'Oregon')
            manager.UpdateState('PA', 'Pennsylvania')
            manager.UpdateState('RI', 'Rhode Island')
            manager.UpdateState('SC', 'South Carolina')
            manager.UpdateState('SD', 'South Dakota')
            manager.UpdateState('TN', 'Tennessee')
            manager.UpdateState('TX', 'Texas')
            manager.UpdateState('X1', 'United States')
            manager.UpdateState('UT', 'Utah')
            manager.UpdateState('VT', 'Vermont')
            manager.UpdateState('VA', 'Virginia')
            manager.UpdateState('WA', 'Washington')
            manager.UpdateState('WV', 'West Virginia')
            manager.UpdateState('WI', 'Wisconsin')
            manager.UpdateState('WY', 'Wyoming')
            manager.UpdateState('A0', 'Alberta, Canada')
            manager.UpdateState('A1', 'British Columbia, Canada')
            manager.UpdateState('A2', 'Manitoba, Canada')
            manager.UpdateState('A3', 'New Brunswick, Canada')
            manager.UpdateState('A4', 'Newfoundland, Canada')
            manager.UpdateState('A5', 'Nova Scotia, Canada')
            manager.UpdateState('A6', 'Ontario, Canada')
            manager.UpdateState('A7', 'Prince Edward Island, Canada')
            manager.UpdateState('A8', 'Quebec, Canada')
            manager.UpdateState('A9', 'Saskatchewan, Canada')
            manager.UpdateState('B0', 'Yukon, Canada')
            logger.info('All states loaded in db')

    except Exception as e:
        logger.error(e)

if __name__ == '__main__':
    logger = logging.getLogger()
    if 'LOGGING_LEVEL' in os.environ and os.environ['LOGGING_LEVEL'] == 'DEBUG':
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(threadName)s - %(message)s')

    app_loop = asyncio.get_event_loop()
    app_loop.run_until_complete(main(logger))
